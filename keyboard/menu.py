from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import InlineKeyboardButton, KeyboardButton


def menu_key():

    builder = InlineKeyboardBuilder()

    builder.button(text="–û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="about_shop")
    builder.button(text="–ó–∞–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å", callback_data="get_detail_menu")
    builder.button(text="–ì–∞—Ä–∞–Ω—Ç–∏—è –∏ –í–æ–∑–≤—Ä–∞—Ç", callback_data="info_refund")
    builder.button(text="–ö–æ—Ä–∑–∏–Ω–∞", callback_data="get_basket")
    builder.adjust(1)
    return builder.as_markup()



def go_menu():

    builder = InlineKeyboardBuilder()

    builder.button(text="–ú–µ–Ω—é", callback_data="go_menu")
    return builder.as_markup()


def choose_producer_key(names: list):

    builder = InlineKeyboardBuilder()
    for i, name in enumerate(names):
        if name != "-":
            builder.button(text=name, callback_data=str(i))
    builder.adjust(3)
    builder.row(
        InlineKeyboardButton(
            text="–ú–µ–Ω—é", callback_data="go_menu"
        ),
        InlineKeyboardButton(
            text="–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∞—Ä—Ç–∏–∫—É–ª", callback_data="get_detail_menu"
        )
    )
    return builder.as_markup()


def choose_item_key():

    builder = InlineKeyboardBuilder()
    for i in range(1, 4):
        builder.button(text=str(i), callback_data=f"{str(i - 1)}")
    builder.row(
        InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥", callback_data="back_to_prod"
        ),
        InlineKeyboardButton(
            text="–ú–µ–Ω—é", callback_data="go_menu"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∞—Ä—Ç–∏–∫—É–ª", callback_data="get_detail_menu"
        )
    )
    return builder.as_markup()


def key_order():
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="go_order")
    builder.row(
        InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥", callback_data="back_to_choose_detail"
        ),
        InlineKeyboardButton(
            text="–ú–µ–Ω—é", callback_data="go_menu"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∞—Ä—Ç–∏–∫—É–ª", callback_data="get_detail_menu"
        )
    )
    return builder.as_markup()

def key_order_busket():
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="go_order")
    builder.row(
        InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥", callback_data="get_busket"
        ),
        InlineKeyboardButton(
            text="–ú–µ–Ω—é", callback_data="go_menu"
        )
    )

    return builder.as_markup()


def key_points(points):

    builder = InlineKeyboardBuilder()

    for point in points:
        builder.button(text=point["button_name"], callback_data=str(point["id"]))
    builder.adjust(3)
    builder.row(
        InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥", callback_data="back_to_detail"
        ),
        InlineKeyboardButton(
            text="–ú–µ–Ω—é", callback_data="go_menu"
        )
    )
    return builder.as_markup()


def key_get_contacts():

    builder = ReplyKeyboardBuilder()
    builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Çüì≤", request_contact=True)
    keyboard = builder.as_markup()
    keyboard.resize_keyboard = True
    keyboard.one_time_keyboard = True
    return keyboard


def key_photo_pay():

    builder = InlineKeyboardBuilder()
    builder.button(text="–ú–µ–Ω—é", callback_data="go_menu")
    return builder.as_markup()


def key_accept_order(user_id, id_order):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{id_order}_{user_id}")
    return builder.as_markup()


def key_finish_order(user_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"finish_{user_id}")
    builder.button(text="–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º", callback_data=f"break_{user_id}")
    builder.adjust(1)
    return builder.as_markup()


def key_skip_note():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_note")
    return builder.as_markup()


def key_menu_after_success():

    builder = InlineKeyboardBuilder()
    builder.button(text="–ú–µ–Ω—é", callback_data=f"go_menu_w")
    return builder.as_markup()


def key_after_set_number(user_id, order_id, caption):

    builder = InlineKeyboardBuilder()
    if "–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞‚úÖ" not in caption:
        builder.button(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{order_id}_{user_id}")
        return builder.as_markup()
    else:
        builder.button(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"finish_{user_id}")
        builder.button(text="–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º", callback_data=f"break_{user_id}")
        builder.adjust(1)
        return builder.as_markup()
